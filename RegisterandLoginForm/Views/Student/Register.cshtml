 @model RegisterandLoginDAL.Student

@{
    ViewBag.Title = "Student Registration";
}

<style>
    /* Background Gradient */
    body {
        background: linear-gradient(to right, #eef2f3, #d9e4ec);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Glassmorphism Card */
    .glass-card {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        z-index:-123;
    }

    /* Table Header */
    .table thead {
        background-color: #007bff;
        color: white;
    }

    /* Input Styling */
    input.form-control, select.form-control {
        border-radius: 8px;
        border: 1px solid #ced4da;
        transition: all 0.3s ease;
    }

        input.form-control:focus, select.form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    /* Add Button */
    #addQualification {
        border-radius: 25px;
        font-weight: 500;
    }

    /* Remove Button */
    .remove {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
    }

        .remove:hover {
            background-color: #b02a37;
        }
</style>


<div class="container my-5 ">
    <h2 class="text-center text-primary fw-bold mb-4">
        🎓 Student Registration
    </h2>
    <div class="card glass-card shadow-lg rounded-4 p-4  border-0">
      

        @using (Html.BeginForm("Register", "Student", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
        {
            <div class="row g-4">
                <!-- First Name -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-user me-2 text-primary"></i>First Name
                    </label>
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>

                <!-- Last Name -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-user me-2 text-primary"></i>Last Name
                    </label>
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                </div>

                

                <!-- Age -->
                <div class="col-md-4">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-hourglass-half me-2 text-primary"></i>Age
                    </label>
                    @Html.TextBoxFor(m => m.Age, new { @class = "form-control", required = "required", @id = "Age", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.Age, "", new { @class = "text-danger" })
                </div>

                <!-- DOB -->
                <div class="col-md-4">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-calendar me-2 text-primary"></i>Date of Birth
                    </label>
                    @Html.TextBoxFor(m => m.DOB, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required", @id = "DOB" })
                    @Html.ValidationMessageFor(m => m.DOB, "", new { @class = "text-danger" })
                </div>

                <!-- Gender -->
                <div class="col-md-4">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-venus-mars me-2 text-primary"></i>Gender
                    </label>
                    @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "Male", "Female", "Other" }), "-- Select --", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })
                </div>

                <!-- Email -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-envelope me-2 text-primary"></i>Email
                    </label>
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", required = "required", type = "email" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>

                <!-- Phone -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-phone me-2 text-primary"></i>Phone Number
                    </label>
                    @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                </div>

                <!-- Username -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-user-circle me-2 text-primary"></i>Username
                    </label>
                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required" })
                </div>

                <!-- Password -->
                <div class="col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="fa fa-lock me-2 text-primary"></i>Password
                    </label>
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required" })
                </div>
            </div>

            <!-- Qualifications -->
            <hr class="my-4" />
            <h4 class="text-secondary">Qualification Details</h4>

            <table class="table table-bordered mt-3" id="qualificationTable">
                <thead>
                    <tr>
                        <th>Course</th>
                        <th>University</th>
                        <th>Year</th>
                        <th>Percentage</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

            <button type="button" id="addQualification" class="btn btn-outline-dark mb-3">
                <i class="fa fa-plus me-1"></i> Add Qualification
            </button>

            <div class="text-end">
                <input type="submit" value="Register" class="btn btn-success px-4 rounded-pill" />
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        let qualificationIndex = 0;

        $("#addQualification").click(function () {
            $("#qualificationTable tbody").append(`
                        <tr>
                            <td><input class="form-control" name="qualifications[${qualificationIndex}].CourseName" required /></td>
                            <td><input class="form-control" name="qualifications[${qualificationIndex}].University" required /></td>
                            <td><input class="form-control" name="qualifications[${qualificationIndex}].YearOfPassing" type="number" required /></td>
                            <td><input class="form-control" name="qualifications[${qualificationIndex}].Percentage" type="number" step="0.01" required /></td>
                            <td><button type="button" class="remove">Remove</button></td>
                        </tr>
                    `);
            qualificationIndex++;
        });

        // Remove row
        $(document).on("click", ".remove", function () {
            $(this).closest("tr").remove();
        });
    </script>
    
    <script>
        document.getElementById("DOB").addEventListener("change", function () {
            let dob = new Date(this.value);
            let today = new Date();

            if (!isNaN(dob.getTime())) {
                let age = today.getFullYear() - dob.getFullYear();
                let monthDiff = today.getMonth() - dob.getMonth();

                // Adjust if birthday hasn't occurred yet this year
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }

                // Set calculated age
                document.getElementById("Age").value = age;

                // Example validation: must be between 18 and 60
                if (age < 18 || age > 60) {
                    alert("Age must be between 18 and 60 years.");
                    document.getElementById("DOB").value = "";
                    document.getElementById("Age").value = "";
                }
            }
        });
    </script>

}